<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.equifax.dibibatch.gcp</groupId>
	<artifactId>varizon-cnx-keying</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<!-- <name>varizon-cnx-keying</name> -->
	<!-- FIXME change it to the project's website -->
	<!--<url>http://www.example.com</url> -->


	<properties>
		<beam.version>2.20.0</beam.version>
		<junit.version>4.13-beta-3</junit.version>
		<maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
		<maven-exec-plugin.version>1.6.0</maven-exec-plugin.version>
		<maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
		<maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
		<mockito.version>3.3.3</mockito.version>
		<slf4j.version>1.7.30</slf4j.version>
		<maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>
		<postgresql.connector.version>42.2.12</postgresql.connector.version>
		<postgresql.proxy.version>1.0.16</postgresql.proxy.version>
		<jacoco.version>0.8.6</jacoco.version>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/target/coverage-reports/jacoco-unit.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>
		<hamcrest.version>2.1</hamcrest.version>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<parallel>all</parallel>
					<threadCount>4</threadCount>
					<redirectTestOutputToFile>true</redirectTestOutputToFile>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>${maven-surefire-plugin.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Ensure that the Maven jar plugin runs before the Maven shade plugin 
				by listing the plugin higher within the file. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<configuration>
					<skip>${maven.test.skip}</skip>
					<destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
					<dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
					<output>file</output>
					<append>true</append>
					<excludes>
						<exclude>*MethodAccess</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>jacoco-initialize</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<phase>test-compile</phase>
					</execution>
					<execution>
						<id>jacoco-site</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>copy-airflow-files</id>
						<phase>compile</phase>
						<configuration>
							<target name="copy airflow files">
								<copy todir="target/airflow">
									<fileset dir="airflow" includes="*.py">
										<filename regex=".*" />
									</fileset>
									<mapper type="regexp" from="^(.*)" to="${env}-\1" />
								</copy>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.3</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<basedir>target/airflow</basedir>
					<includes>
						<include>*.py</include>
					</includes>
					<token>ENV</token>
					<value>${env}</value>
				</configuration>
			</plugin>

			<!-- Configures `mvn package` to produce a bundled jar ("fat jar") for 
				runners that require this for job submission to a cluster. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${maven-shade-plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<finalName>${project.artifactId}-bundled-${project.version}</finalName>
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/LICENSE</exclude>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${maven-exec-plugin.version}</version>
					<configuration>
						<cleanupDaemonThreads>false</cleanupDaemonThreads>
					</configuration>
				</plugin>


			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>direct-runner</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<!-- Makes the DirectRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-direct-java</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>dataflow-runner</id>
			<!-- Makes the DataflowRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

	</profiles>

	<dependencies>
		<!-- Adds a dependency on the Beam SDK. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-core</artifactId>
			<version>${beam.version}</version>
		</dependency>

		<!-- Adds a dependency on the Beam Google Cloud Platform IO module. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
			<version>${beam.version}</version>
		</dependency>

		<!-- Apache Beam SQL Extension -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-extensions-sql</artifactId>
			<version>${beam.version}</version>
		</dependency>


		<!-- Add slf4j API frontend binding -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!--Apache Beam JDBC IO -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-io-jdbc</artifactId>
			<version>${beam.version}</version>
		</dependency>

		<!-- PostgreSQL Connector -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.connector.version}</version>
		</dependency>
		<!-- PostgreSQL Connector Proxy Socket -->
		<dependency>
			<groupId>com.google.cloud.sql</groupId>
			<artifactId>postgres-socket-factory</artifactId>
			<version>${postgresql.proxy.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>${slf4j.version}</version>
			<!-- When loaded at runtime this will wire up slf4j to the JUL backend 
				- runtime scope -->
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>


		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- The DirectRunner is needed for unit tests. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-runners-direct-java</artifactId>
			<version>${beam.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>29.0-jre</version>
		</dependency>

		<!-- Bean Validations Dependencies -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.20.Final</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<version>6.0.20.Final</version>
		</dependency>

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>2.2.6</version>
		</dependency>
		<dependency>
			<groupId>com.equifax.usis.dibi.batch.gcp.dataflow</groupId>
			<artifactId>dibi-batch-commons</artifactId>
			<version>develop_1.0.5-SNAPSHOT</version>
		</dependency>
	</dependencies>
</project>